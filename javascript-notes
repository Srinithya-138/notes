 ECMA script is a specification
 js is a programming language
 prompt is used to get the input from user the prompt takes input is in tha form of string if you enrter a number also (if you get number as input the number is a string)
 alert is used to display a alert box in js we can use any arithmetic operation and see the output in the alert box
 script src is used for linking js 
 var,let,cons are variables 
 //rules 
 var name are case sensitive
 keyword (resreved words) is not accepted 
 we can use camelcase (smallName) for larger names ,
 no space and no hypen(-) is allowed 
 only(letters,digits,underscore is allowed _and $ is allowed)
var is old name of naming variables
var:variable name can be re-declared & updated .A global scope variable (in all the codes)
let:variable name cannot be re-declared but can be updated.A block scope variable({
    inside a block
}) 
const:variable name cannot be re-declared or updated.A block scope variable
if we decalre a variable (let name) but not the value if we are trying to console.log ,we get an value undefined in js by default .But it is not used in const 

//datatypes 
primitive(7)
number,string,boolean,undefined,null,BigInt,symbol
non-primitive
objects(arrays,functions) is a collection of different values
inside the object we have the pair of (keyname:value) 
to access the value we have 2 methods
1)obj.keyname
2)obj["keyname"]
//Comparing two JavaScript objects always returns false.

if we have a const object we can update the object's key

//operators
arithmetic,modulus,exponentiation
unary operator (increment,decrement)
comparision operators
1) equal to (==)(it checks for value)
2) not equal to (!=)
to check fro data type
1) equal to (===)
2) not equal to (!==)
logical oprators
logical AND(&&)
logical OR( ||)
logical NOT(!)

//conditional statement-to implement some condition
if statement
if else if
ternary //if we want to print in output we have to use the " " console .log

//MDN Docs
switch statement 
prompt is used to store the value from user .

//loops
to execute a piece of code again and again
for loop
infinite loop:a loop that never ends
while loop
while(stopping condition)
do{

}while(condition);
//for-of loop
used fro strings and arrays
for(variable name of string of array variable name){
//this loop takes from starting value and then iterrate itself and goes to the ending value and is not used for objects
}
//for-in loop used frop objecrt and array
for( variable name in objecrt name )
//for each  is a inbuild method 



//Strings in js
to create a string(let str=" ")
string lenth is(str.length)
to access a string index(str[index value])
//template literals in js
a way to have embedded expression in strings(special string)
eg:let specialString=`this is template literal` this is used for the objects
this  is used when we want to display the string in the console box and we want that value for the object 
to use the var name we have to use (${var name})
**in template literal if we want a number in the output it becomes string and is not highlighted in the output (in the console box numbers are highlighted)
//string interpolation
to create a string by doing substitution of placeholders
`string text ${expression} string text`//expression is embedded and its value is calculated in the run time
${1+2+3}//6 is the output ,but this 6 is a string if we display the typeof that then we can see that
//escape characters
\n is used for next line
\t -tab space
\t is counted as single character in the string if we display the string length then we can see that

//string methods
these are built-in functions to manipulate a string 
str.UpperCase()
str.LowerCase()
str.trim()//removes white spaces in the starting and end and it will not trim space in between
strings are immutable if we use the above methods then the changes will be creatyed in the new string not in tha old
str.slice(start,end?)//returns part of string and if we write the ending value aas 3it takes as 3-1=2 upto that only it returns
str1.concat(str2)//joins str2 with str1

//arrays
collection of items
if we ask typeof then it will  output as objectsarray is a object in js
arrays are mutable
//looping an array 
used for printing all items in array
we can use for loop,for -of loop also
//array methods
push()-add to end
pop()-delete from end &returns
toString()-converts array to string but the change is not affected in the original array
concta()-joins multiple arrays &returns array
unshift()-used to add item in the front   
shift()-used to delete first item in an array
slice()-returns a piece of index [slice(startindex,endindex)]
//it doesnot change with the original array 
//and the end index what we given is endindex-1 index will be displayed
splice()- change the original array (add,remove,replace)
splice(startindex,delcount,neweel1..) 
//del count will say how many element we wanted to be deleted with starting index if we say 0 then only that index element is deleted and we say 1 that iindex number and near index number is deleted
//if we dont want to add neweel1 then we can close the arrray with delcount if we want then we can add with the comma
//that new element is added to the deleted index place
//if we say only starting index then it will return from the starting to arrindex-1 if we doen not say the delcount and neweel1

//function in js
used to perform specific task ,can be invoked whenever needed
we have to write function defenition and function call 
redundancy-code repetation
in function if we say return and we try to write console.log()after thatretur statement it is not possible 
but if we write console.log before return then it is possible 
function parameters are local variables of function i.e this value is used only inside that {} this bracket (scope)

//arrowfunctions
is used for small work 
variable name =(function argument)=>{

}
const functionName=(parameter1,parameter2..)=>{
    //do some work 
}
//for each  is a method because we are invoking it by object-used for array to display the value or index or the entire array or used for calculation purpose
it is a loop for arrays and not for any other things
syn:nameofarray.forEach(callBackFunctionname)
in the above case callbackfunction is a function to execute for each element in the array
callback is nothing but  we are sending a function to call a function name as argument then it is known as callback function
a callback is a function passed as an argumrnt to another function
the parameter passed can be 3
1)value
2)index
3)array
higher order function-either take another function as a parameter inside them or they return another function as a output so for-each is a HOF
higher order method

//map method-will create a new array as a result
create a new array with the result of some operation.The value its callback function returns are used too form a new array
syt:arr.map(callbackfunction(val,ind,arr))     

//filter method-based on some condition it takes the value from index in the array and filter ccording to the condition
if the condition is false then no value is returned in the method or stored in the method

//reduce method-performs some operation & reduce the array to a single value.It returns that single value
syn:reduce(previous value number,currentvalue number)
reduce method starts with two value and the result will be updated and a single value will come as a output

//window object
it represent the open window in a browser.It is browser's object (not js's object)
'and is automatically created by browser.it is global object with lots of properties and methods (prompt,alert area a part of window object)
window->document->html
we can access all the tags inside the html using js (when the html element comes inside the htmlelement it behaves like a object  and these special object is named as document )
//DOM-Document Object Model-an interface for web document that represent their structure as a tree-like object.It allows dynamic manipulation of page content using languages like js.
console.dir- is used for using property and method
when a web page is loaded the browser creates a document object model of the page
 to create dynamic manipulatION (CHANGE) we are using DOM to change a p tag 

//DOM MAnipulation-change a one text to another text  
1)selecting with id-document.getElementById("myid")
2)selecting with class-document.getElementByClassName("myClass")
3)Selecting with tag-document.grtElementByTagName("p")
//query selector-return node list->to access a class .,id-#,tag simply tag name 
1)document.querySelector("myId/myClass/tag")//return first element
2)document.querySelectorAll("myId/myClass/tag")//return a nodelist
properties
*tagName-returns tag for element node
*innerText-returns the text content of the element and all its children
*innerHtml-return the plain text or HTML contents in the element
*textContent-returns textual content even for hidden elements ,it simply returns the text content inside the tag
//by using textContent we can get the text content and also we can change the text content also 
first child and last child ,children 
there are also 3 nodes 
text,comment,

getAttribute("att name")//to get attribute value
setAttribute("attr","value")//to set the attribute val 
node(selected var name ).style.stylename->

//textContent deal with the text content inside the tag even for hidden elements
//innerHtml deal with the tag and then the content of the text and all its childeren
//innerText deal with the text of the tag 
//tagName deals with tag for element nodes 

Different ways of selecting element
1)querySelector -used to select id,class and tag also ,this checks what is matching first 
to select class .classname,to select tag tagname only and if we have two tag in the same name then 1 st one will be selected
2)querySelectorAll-this returns a nodelist ,works as array 
3)getElementByClassName-without dot we can put class name directly
4)getElementById-we canput only id
5)grtElementByTagName-we can put only tag name

//insert element 
//how to create element->document.createElement("tag we want")
append -> after the tag i.e last 
prepend->before the tag  
insertAdjacentElement->for thate we have to createElement("tag") and then we need to give the insertAdjacentElement in which place the element is needed to place and which element we want 
1)beforebegin->this create h1 tag before the div tag first we have to create element  [varname.insertAdjacentElement("beforebegin",createElement var name)
2)afterbegin->this create the element at first  inside the div tag
3)beforeend->this create the element at the last inside the div tag      
4)afterend->this create h1 tag after the div tag 
listItem.innerHTML=input.value+"<button onclick='deleteItem(event)'>delete</button>"//we have to give single quotes inside the " " to differentitae or else we have to give "<button onclick=\"deleteItem(event)\">delete</button>"

//deleting htmlelement->variable name.remove()
 
change in the state of an object is known as event 
//events and event haNDlers are changing something with the use of button 
// event in js is an action or occurence that happens within a web page,suh as a user`s interaction(clicking a button)or
a page loading.
//event handler in js is a function that responds to an event when it occurs.It listens for specific
events and execute code to perform action based on those events,creating interactive and dynamic web applications
//different types of events:
onclick-user clicks an html element
onchange-html element has been changed
onmouseover-user moves the mouse over an html element
onmouseout-user moves the mouse away from an html element
onkeydown-user pushes a keyboard key
onload-browser has finished loading the page 
ondblclick-double clicked 
for events we can give as inline or we can use it in js 
//if we write both inline and js code for event js code gets priority
//in js if we write (node.onclick) if we try to use it in js as a function it gets override and second one gets executed 


//event object -is a special object that has details about the event
all event handlers have access to the event object's properties and methods.
node.event=(e)=>{
    //handle here 
}
e.target,e.type,e.clientX,e.clientY
 e.type-says what event we have used  [click]
 e.target says foe=r which the event is happened[button tag fully is writtened]
function functionname(event){
//function defennition
}

functionname(event)//calling function
if we print the event in console.log then we can see so many function ,
we can take the content of the button using target function inside the event
//therefore by using (event.target.textContent) we can take the content inside the button if we pass the event when we click the button
remove is uded to delete 



//event lisner->this is specially used in button ,first we are selecting the element and then saying what event is happening and if the event happen then we are saying what we want to happen 
syn:varname.addEventListener("mouseover",function(){
    alert("Mouse over")
})
syn:node.addEventListener(event,callbackfunction)
node.removeEventLisner(event,callbackfunction)->the callback reference should be same to remove 

//prototype:
//classes:prgm or template for creating object 
those object will have some state(variables)&some behaviour(functions)inside it


text is inside the paragraph and heading tag but the text is not inside the input tag 
we can get only the value for input box
text content for p,h tag

//random number creation 
math.random()-it gives the value of 0.0 to 0.9 random number
if we multiple by 10 we get the value as 1.to 9. random numbers
floor is nothing but up to down (biggest number is converted into the smallest number)
//to create a random number we have to use'
console.log(Math.floor((Math.random)*10))
random number generates from 0 to 9 in the above code if we give +1 then we can get from 1 to 10
console.log(Math.floor((Math.random)*10)+1)

//DOM manipulation with css 
bgcolor change is using :idname.style.backgroundColor="red"
set the attribute usimg:idname.setAttribut("class","classnamewe defined")
 
//when we start typing in the keyboard for the input tag the result should come down without clicking a button but by calling a function
onkeyup="functionname()"

prototype is a special object inside a object and it has some properties and method
we can set prototype as __proto__

classes
super keyword is used to call the constructor of parent class to access the parent's properties and method 


//callback - function passed as an argument to another function 
synchronous-line by line execution and each instruction wait for the previous instruction
Asynchronous-due to synchronous some imp inst get blocked due to some previous inst.it execute allow to execute next instruction immediatelya dn does not block the flow 
setTimeOut()-is a function which decides to execute a function in which time it wanted to be executed if we write 4000 then it wait for 4s and get executed but this code run parralley and next line program gets run 
callback Hell-nested callbacks stacked below one another forming a pyramid structure.(pyramid of doom)
 
//promises-to solve a problem of callback hell
is for "eventual" completion of task .It is an object in js.It is a solution to callback hell
let promise = new promise((resolve,reject ))
.then(here we will call a function and we can define a arrow function)-is used for success (resolve)
.catch()is used for failure (reject)


map,filter and reduce are higher order function
map is used in array used to create a new array with the old array 

fetch API (Application programming Interface)-provide interface for fetching(sending/receiving) resources.It uses Request and Response objects.The fetch() method is used to fetch the resource  
fetch API provides an interface for fetching (sending/receiving)resources.
It uses request andresponse objects.
the fetch() method is used to ftech a resource(data)  
fetch('  ')->fecth only and get request 
fetch('  ',{
    method:'POST',
    headers:{'content-type':application/json'},
    body:JSON.stringify({
        userId:22,
        id:456,
        title:'test',
        completed:false
    })

    })->inserted api to post 