when a html page is loaded the browser creates a DOM like structure
react is a library for building user interface
virtual DOM model -just update the new content added(difference ) will go to the server so therre will not be slow down in the web page

//component has reusable code and its a individual piece of code which has its own input and output and it has itsown fuctionality 
 
it has component->services->route
one way binding
component can have statae which is an object and it determines how to render and behave
"App" or "Global" state refers to state that is available to UI
imported files are written as <name/> this name should be imported
to create a new project 'npx create-react-app name'
component first letter should be caps
If we want to use the react component we have to use like html tag
return should be html code and the returned html code should have a single html parent (singlr html tag and we can write the code inside that parent)
react we write js and html code to write class we havr to name className
we can take one component and use it in another component i.e., we can reuse it
the browser does not understand the react code so we are using the node to convert react to html and css
the package.json has the package
to inject react code to html code we need a separate html file that html file is inside the public folder as index.html

<div id="root"></div> here only all the code are injected and we are displaying it in the browser 
<>empty tag</> we can use the same component many times 
to use inline style:
const varname={
    color:'red'
}
<div style={varname}>plant</div>
(or)
<div style={{color:'blue'}}>plant3</div>
to use variable we have to put{curlybraces}and write the variable name inside the bracket
in the component return statement we can write only the html code by default in case if we want to write js code then we can put{ }
by creating dynamically we can use the properties to change the value,we can change the content before the return statement
if we want to chnage the design we can use the tags to change it after the return statement
to pass data dynamically syn: varname={'data'}
props is used for component passing and using the passed data dynamically
reusability is done using props 
//object destructuring  
const name={
    first:'sri',
    last:'nithya'
  }
const {first,last} = name ->(object destructuring)here first and last are coming from name so we are using object destructuring
console.log(name.first,name.last,first,last,)

//props
<Growingplant plantData= {plantData1}/>here plant data has some value that is passed to the growingplant component and instead of passing the name props we are giving the plantData as name
const Growingplant = ({plantData}) => { //here for the plant data the assigned value of plantData1 will come
let {name,size}=plantData //if we use this we can use only the name aaaaaaaaand size instead of plantData.name
return (

   <h1>{name}</h1>
);
}

key is used as unique identifier
render is first time we typing the code that is remebered by the react
if the prop changes it rerender the code
//hooks
//state
if we did some changes with the button the reflection occur but it is not reflected in the ui only the reflection can be seen in the console. log
//have to import the usestate
useState -> used to create a state and the data can be changed conditionally in the state itself
//when to use usestate :component reload and want to change the data and it should be reflected in the ui
//to create a use state variable
const [new variable name]=useState(var default value(var name which we wanted to change ))
to update the state variable we should not use directly we have to use the setVARIABLENAME
const[vn,setvn]=useState(var default value(var name which we wanted to change ))
//props
1)import {useState}
2)declare a variable to which we want the value to be changed
3)if we want to update the state variable use "set"
const [dynamicsize,setdynamicsize]=useState(size)//here size is the value which we want to update,dynamicsize is the new variable to updtae the value we are using the setdynamicsize
4)usestate->function call pandra mari call pannitu poiralam

setdynamicsize(dynamicsize+30)//this will be reflected in the ui

//useeffect- when the data is changed with usestate we have to do some work with the help of the changed data we can use useeffect  
1)import {useEffect}
2)keyword-useEffect(parameter1,parameter2)
useEffect(function,dependency array)

useEffect(()=>{
console.log('her')//first time running code
},[])//if we give like this it runs only one time

useEffect(()=>{
console.log('dynamic size changed:',dynamicsize)
if(dynamicsize>100){
alert('plant grown successfully')
}
},[dynamicsize])//dependency
const bigger=()=>{
setdynamicsize(dynamicsize+30)
} this will change when the useeffect value changes

      or we can write as
    
const funct1=()=>{
console.log('dynamic size changed:',dynamicsize)
if(dynamicsize>100){
alert('plant grown successfully')
}
}
useEffect(funct1,,[])

useEffect is used in real time application to check network call,apicall,to check login or not ,to synchronize 

react lifecycle
1)mount->the component we created comes in the web page for the first time 
2)update->when component gets updated(change)
3)unmount->when its get destroyed
*when we want to do something when the component gets mounted(first time ) we are using the "useEffect" 
*when we want to do something in the unmount state we can write in "return" statement
*when we want to do something in the update state we can write in "dependency" statement